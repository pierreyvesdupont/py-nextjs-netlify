{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/pierre-yves/projets/py-nextjs-netlify/src/pages/posts/[post].tsx\";\nimport hydrate from \"next-mdx-remote/hydrate\";\nimport { parseISO } from 'date-fns';\nimport PostLayout from \"../../components/PostLayout\";\nimport InstagramEmbed from \"react-instagram-embed\";\nimport YouTube from \"react-youtube\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\nexport var __N_SSG = true;\nvar components = {\n  InstagramEmbed: InstagramEmbed,\n  YouTube: YouTube,\n  TwitterTweetEmbed: TwitterTweetEmbed\n};\nexport default function Post(_ref) {\n  var title = _ref.title,\n      dateString = _ref.dateString,\n      slug = _ref.slug,\n      tags = _ref.tags,\n      author = _ref.author,\n      _ref$description = _ref.description,\n      description = _ref$description === void 0 ? \"\" : _ref$description,\n      source = _ref.source;\n  var content = hydrate(source, {\n    components: components\n  });\n  return /*#__PURE__*/_jsxDEV(PostLayout, {\n    title: title,\n    date: parseISO(dateString),\n    slug: slug,\n    tags: tags,\n    author: author,\n    description: description,\n    children: content\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_c = Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/pierre-yves/projets/py-nextjs-netlify/src/pages/posts/[post].tsx"],"names":["hydrate","parseISO","PostLayout","InstagramEmbed","YouTube","TwitterTweetEmbed","components","Post","title","dateString","slug","tags","author","description","source","content"],"mappings":";;AAGA,OAAOA,OAAP,MAAoB,yBAApB;AAKA,SAASC,QAAT,QAAyB,UAAzB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AAEA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;;AAYA,IAAMC,UAAU,GAAG;AAAEH,EAAAA,cAAc,EAAdA,cAAF;AAAkBC,EAAAA,OAAO,EAAPA,OAAlB;AAA2BC,EAAAA,iBAAiB,EAAjBA;AAA3B,CAAnB;AAOA,eAAe,SAASE,IAAT,OAQL;AAAA,MAPRC,KAOQ,QAPRA,KAOQ;AAAA,MANRC,UAMQ,QANRA,UAMQ;AAAA,MALRC,IAKQ,QALRA,IAKQ;AAAA,MAJRC,IAIQ,QAJRA,IAIQ;AAAA,MAHRC,MAGQ,QAHRA,MAGQ;AAAA,8BAFRC,WAEQ;AAAA,MAFRA,WAEQ,iCAFM,EAEN;AAAA,MADRC,MACQ,QADRA,MACQ;AACR,MAAMC,OAAO,GAAGf,OAAO,CAACc,MAAD,EAAS;AAAER,IAAAA,UAAU,EAAVA;AAAF,GAAT,CAAvB;AACA,sBACE,QAAC,UAAD;AACE,IAAA,KAAK,EAAEE,KADT;AAEE,IAAA,IAAI,EAAEP,QAAQ,CAACQ,UAAD,CAFhB;AAGE,IAAA,IAAI,EAAEC,IAHR;AAIE,IAAA,IAAI,EAAEC,IAJR;AAKE,IAAA,MAAM,EAAEC,MALV;AAME,IAAA,WAAW,EAAEC,WANf;AAAA,cAQGE;AARH;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;KAtBuBR,I","sourcesContent":["import { GetStaticProps, GetStaticPaths } from \"next\";\nimport renderToString from \"next-mdx-remote/render-to-string\";\nimport { MdxRemote } from \"next-mdx-remote/types\";\nimport hydrate from \"next-mdx-remote/hydrate\";\nimport matter from \"gray-matter\";\nimport { fetchPostContent } from \"../../lib/posts\";\nimport fs from \"fs\";\nimport yaml from \"js-yaml\";\nimport { parseISO } from 'date-fns';\nimport PostLayout from \"../../components/PostLayout\";\n\nimport InstagramEmbed from \"react-instagram-embed\";\nimport YouTube from \"react-youtube\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\n\nexport type Props = {\n  title: string;\n  dateString: string;\n  slug: string;\n  tags: string[];\n  author: string;\n  description?: string;\n  source: MdxRemote.Source;\n};\n\nconst components = { InstagramEmbed, YouTube, TwitterTweetEmbed };\nconst slugToPostContent = (postContents => {\n  let hash = {}\n  postContents.forEach(it => hash[it.slug] = it)\n  return hash;\n})(fetchPostContent());\n\nexport default function Post({\n  title,\n  dateString,\n  slug,\n  tags,\n  author,\n  description = \"\",\n  source,\n}: Props) {\n  const content = hydrate(source, { components })\n  return (\n    <PostLayout\n      title={title}\n      date={parseISO(dateString)}\n      slug={slug}\n      tags={tags}\n      author={author}\n      description={description}\n    >\n      {content}\n    </PostLayout>\n  )\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n  const paths = fetchPostContent().map(it => \"/posts/\" + it.slug);\n  return {\n    paths,\n    fallback: false,\n  };\n};\n\nexport const getStaticProps: GetStaticProps = async ({ params }) => {\n  const slug = params.post as string;\n  const source = fs.readFileSync(slugToPostContent[slug].fullPath, \"utf8\");\n  const { content, data } = matter(source, {\n    engines: { yaml: (s) => yaml.load(s, { schema: yaml.JSON_SCHEMA }) as object }\n  });\n  const mdxSource = await renderToString(content, { components, scope: data });\n  return {\n    props: {\n      title: data.title,\n      dateString: data.date,\n      slug: data.slug,\n      description: \"\",\n      tags: data.tags,\n      author: data.author,\n      source: mdxSource\n    },\n  };\n};\n\n"]},"metadata":{},"sourceType":"module"}