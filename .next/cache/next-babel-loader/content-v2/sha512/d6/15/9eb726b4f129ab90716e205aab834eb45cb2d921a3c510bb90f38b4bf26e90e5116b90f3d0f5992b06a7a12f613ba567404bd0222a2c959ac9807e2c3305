{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport renderToString from \"next-mdx-remote/render-to-string\";\nimport hydrate from \"next-mdx-remote/hydrate\";\nimport matter from \"gray-matter\";\nimport { fetchPostContent } from \"../../lib/posts\";\nimport fs from \"fs\";\nimport yaml from \"js-yaml\";\nimport { parseISO } from 'date-fns';\nimport PostLayout from \"../../components/PostLayout\";\nimport InstagramEmbed from \"react-instagram-embed\";\nimport YouTube from \"react-youtube\";\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\nconst components = {\n  InstagramEmbed,\n  YouTube,\n  TwitterTweetEmbed\n};\n\nconst slugToPostContent = (postContents => {\n  let hash = {};\n  postContents.forEach(it => hash[it.slug] = it);\n  return hash;\n})(fetchPostContent());\n\nexport default function Post({\n  title,\n  dateString,\n  slug,\n  tags,\n  author,\n  description = \"\",\n  source\n}) {\n  const content = hydrate(source, {\n    components\n  });\n  return /*#__PURE__*/_jsx(PostLayout, {\n    title: title,\n    date: parseISO(dateString),\n    slug: slug,\n    tags: tags,\n    author: author,\n    description: description,\n    children: content\n  });\n}\nexport const getStaticPaths = async () => {\n  const paths = fetchPostContent().map(it => \"/posts/\" + it.slug);\n  return {\n    paths,\n    fallback: false\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const slug = params.post;\n  const source = fs.readFileSync(slugToPostContent[slug].fullPath, \"utf8\");\n  const {\n    content,\n    data\n  } = matter(source, {\n    engines: {\n      yaml: s => yaml.load(s, {\n        schema: yaml.JSON_SCHEMA\n      })\n    }\n  });\n  const mdxSource = await renderToString(content, {\n    components,\n    scope: data\n  });\n  return {\n    props: {\n      title: data.title,\n      dateString: data.date,\n      slug: data.slug,\n      description: \"\",\n      tags: data.tags,\n      author: data.author,\n      source: mdxSource\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"module"}